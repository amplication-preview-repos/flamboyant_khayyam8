/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { FileService } from "../file.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { FileCreateInput } from "./FileCreateInput";
import { File } from "./File";
import { FileFindManyArgs } from "./FileFindManyArgs";
import { FileWhereUniqueInput } from "./FileWhereUniqueInput";
import { FileUpdateInput } from "./FileUpdateInput";
import { RecordFindManyArgs } from "../../record/base/RecordFindManyArgs";
import { Record } from "../../record/base/Record";
import { RecordWhereUniqueInput } from "../../record/base/RecordWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class FileControllerBase {
  constructor(
    protected readonly service: FileService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: File })
  @nestAccessControl.UseRoles({
    resource: "File",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createFile(@common.Body() data: FileCreateInput): Promise<File> {
    return await this.service.createFile({
      data: data,
      select: {
        createdAt: true,
        fileData: true,
        fileName: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [File] })
  @ApiNestedQuery(FileFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "File",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async files(@common.Req() request: Request): Promise<File[]> {
    const args = plainToClass(FileFindManyArgs, request.query);
    return this.service.files({
      ...args,
      select: {
        createdAt: true,
        fileData: true,
        fileName: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: File })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "File",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async file(
    @common.Param() params: FileWhereUniqueInput
  ): Promise<File | null> {
    const result = await this.service.file({
      where: params,
      select: {
        createdAt: true,
        fileData: true,
        fileName: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: File })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "File",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateFile(
    @common.Param() params: FileWhereUniqueInput,
    @common.Body() data: FileUpdateInput
  ): Promise<File | null> {
    try {
      return await this.service.updateFile({
        where: params,
        data: data,
        select: {
          createdAt: true,
          fileData: true,
          fileName: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: File })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "File",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteFile(
    @common.Param() params: FileWhereUniqueInput
  ): Promise<File | null> {
    try {
      return await this.service.deleteFile({
        where: params,
        select: {
          createdAt: true,
          fileData: true,
          fileName: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/records")
  @ApiNestedQuery(RecordFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Record",
    action: "read",
    possession: "any",
  })
  async findRecords(
    @common.Req() request: Request,
    @common.Param() params: FileWhereUniqueInput
  ): Promise<Record[]> {
    const query = plainToClass(RecordFindManyArgs, request.query);
    const results = await this.service.findRecords(params.id, {
      ...query,
      select: {
        createdAt: true,

        file: {
          select: {
            id: true,
          },
        },

        id: true,
        recordData: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/records")
  @nestAccessControl.UseRoles({
    resource: "File",
    action: "update",
    possession: "any",
  })
  async connectRecords(
    @common.Param() params: FileWhereUniqueInput,
    @common.Body() body: RecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      records: {
        connect: body,
      },
    };
    await this.service.updateFile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/records")
  @nestAccessControl.UseRoles({
    resource: "File",
    action: "update",
    possession: "any",
  })
  async updateRecords(
    @common.Param() params: FileWhereUniqueInput,
    @common.Body() body: RecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      records: {
        set: body,
      },
    };
    await this.service.updateFile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/records")
  @nestAccessControl.UseRoles({
    resource: "File",
    action: "update",
    possession: "any",
  })
  async disconnectRecords(
    @common.Param() params: FileWhereUniqueInput,
    @common.Body() body: RecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      records: {
        disconnect: body,
      },
    };
    await this.service.updateFile({
      where: params,
      data,
      select: { id: true },
    });
  }
}
